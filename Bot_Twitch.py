import os
import requests
import time
from datetime import datetime, timedelta
from twitchio.ext import commands
import google.generativeai as genai
from dotenv import load_dotenv
import wow_comparative  # Importa o m√≥dulo com as fun√ß√µes de compara√ß√£o
import pandas as pd  # Importa√ß√£o necess√°ria para manipular DataFrames
import traceback  # Para logs de erro mais detalhados

# ========== CARREGAMENTO DE VARI√ÅVEIS DE AMBIENTE ==========
load_dotenv()

# ========== CONFIGURA√á√ÉO DO GEMINI ==========
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    print("‚ùå GEMINI_API_KEY n√£o est√° definida. O bot n√£o funcionar√° corretamente.")
else:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        generation_config = {
            "temperature": 0.9,  # Ajustei para um valor mais comum
            "top_p": 0.95,
            "top_k": 40,
            "max_output_tokens": 1024,  # Reduzido para respostas mais concisas
            "response_mime_type": "text/plain",
        }
        model = genai.GenerativeModel(
            model_name="gemini-2.0-flash",
            generation_config=generation_config,
        )
        print("‚úÖ Modelo Gemini configurado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao configurar o Gemini: {e}")
        model = None

# ========== CONFIGURA√á√ïES DA TWITCH ==========
CANAL = os.getenv("TWITCH_CANAL")
CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
REFRESH_TOKEN = os.getenv("TWITCH_REFRESH_TOKEN")
REFRESH_API_URL = f"https://twitchtokengenerator.com/api/refresh/{REFRESH_TOKEN}"

# Verificar se as vari√°veis essenciais est√£o definidas
if not CANAL:
    print("‚ùå TWITCH_CANAL n√£o est√° definido. O bot n√£o funcionar√° corretamente.")
if not CLIENT_ID:
    print("‚ùå TWITCH_CLIENT_ID n√£o est√° definido. O bot n√£o funcionar√° corretamente.")
if not REFRESH_TOKEN:
    print("‚ùå TWITCH_REFRESH_TOKEN n√£o est√° definido. O bot n√£o funcionar√° corretamente.")

# ========== GOOGLE SHEETS ==========
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "174Hx2g3gZ1IV6OztcmeLUfGi8ahH3sYwG2803kcNVew")
SHEET_NAME = os.getenv("SHEET_NAME", "Player_status")
CREDENTIALS_FILE = os.getenv("CREDENTIALS_FILE")

# ========== VERIFICAR TOKEN TWITCH ==========
def verificar_token_twitch(token, client_id, canal):
    """Verifica se o token da Twitch √© v√°lido e tem as permiss√µes necess√°rias."""
    if not token:
        print("‚ùå Token n√£o dispon√≠vel")
        return False
    
    if not client_id:
        print("‚ùå Client ID n√£o dispon√≠vel")
        return False
    
    try:
        # Verificar identidade do usu√°rio
        url = "https://api.twitch.tv/helix/users"
        headers = {
            "Client-ID": client_id,
            "Authorization": f"Bearer {token}"
        }
        response = requests.get(url, headers=headers)
        
        print(f"üîç Resposta da API Twitch (verifica√ß√£o de usu√°rio): {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            if not data.get("data"):
                print(f"‚ùå Token v√°lido, mas n√£o retornou dados: {data}")
                return False
                
            username = data["data"][0]["login"]
            print(f"‚úÖ Token √© v√°lido para o usu√°rio: {username}")
            
            # Verificar se √© o mesmo usu√°rio do canal configurado
            if username.lower() != canal.lower():
                print(f"‚ö†Ô∏è Aviso: O token √© para o usu√°rio {username}, mas o canal configurado √© {canal}")
            
            # Verificar capacidade de criar enquete (opcional, pode dar erro)
            try:
                broadcaster_id = data["data"][0]["id"]
                url = f"https://api.twitch.tv/helix/polls?broadcaster_id={broadcaster_id}"
                response = requests.get(url, headers=headers)
                if response.status_code == 200:
                    print("‚úÖ Token tem permiss√£o para gerenciar enquetes")
                else:
                    print(f"‚ö†Ô∏è O token pode n√£o ter permiss√£o para gerenciar enquetes: {response.status_code}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao verificar permiss√£o de enquetes: {e}")
            
            return True
        else:
            error_message = response.text if hasattr(response, 'text') else "Unknown error"
            print(f"‚ùå Token inv√°lido. Resposta: {error_message}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar token: {e}")
        print(traceback.format_exc())  # Imprimir stack trace detalhado
        return False

# ========== OBTENDO TOKEN TWITCH ==========
def obter_token_via_refresh():
    try:
        if not REFRESH_TOKEN:
            print("‚ùå REFRESH_TOKEN n√£o est√° definido")
            return None
            
        print("üîÑ Obtendo novo token via refresh...")
        response = requests.get(REFRESH_API_URL)
        
        # Verificar se a resposta √© um JSON v√°lido
        try:
            data = response.json()
        except Exception as e:
            print(f"‚ùå Erro ao parsear JSON da resposta: {e}")
            print(f"Conte√∫do da resposta: {response.text[:100]}...")
            return None

        if response.status_code == 200 and "token" in data and "refresh" in data:
            print("‚úÖ Novo token obtido com sucesso!")
            return {
                "access_token": data["token"],
                "refresh_token": data["refresh"]
            }
        else:
            print(f"‚ùå Erro ao obter novo token: {data}")
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è Exce√ß√£o ao obter token: {e}")
        print(traceback.format_exc())  # Imprimir stack trace detalhado
        return None

# Obter token e verificar validade
token_data = obter_token_via_refresh()
if token_data:
    TOKEN = token_data["access_token"]
    NEW_REFRESH_TOKEN = token_data["refresh_token"]  # Salvar para futura atualiza√ß√£o
    print(f"üîë Token de acesso: {TOKEN[:5]}...")
    
    # Verificar se o token √© v√°lido
    print("üîç Verificando token da Twitch...")
    token_valido = verificar_token_twitch(TOKEN, CLIENT_ID, CANAL)
    if not token_valido:
        print("‚ö†Ô∏è O bot pode n√£o funcionar corretamente devido a problemas com o token")
else:
    print("üö® Falha ao obter token.")
    TOKEN = None

# ========== CLASSE DO BOT ==========
class MeuBot(commands.Bot):
    def __init__(self):
        if not TOKEN:
            raise ValueError("üö® Token n√£o dispon√≠vel. N√£o √© poss√≠vel inicializar o bot.")

        super().__init__(
            token=TOKEN,
            client_id=CLIENT_ID,
            prefix="!",
            initial_channels=[CANAL],
            nick=CANAL
        )

        self.cooldown_usuarios = {}
        print(f"üî§ Prefixo do bot configurado como: {self.prefix}")
        print(f"üéØ Bot configurado para o canal: {CANAL}")

    async def event_ready(self):
        print(f"‚úÖ Bot {self.nick} conectado ao canal {CANAL}!")
        # Teste para verificar se est√° realmente conectado
        try:
            # Enviar uma mensagem para voc√™ mesmo (como um ping)
            channel = self.get_channel(CANAL)
            if channel:
                await channel.send("ü§ñ Bot inicializado e pronto para receber comandos!")
                print(f"‚úÖ Mensagem de inicializa√ß√£o enviada para o canal {CANAL}")
            else:
                print(f"‚ùå N√£o foi poss√≠vel obter o canal {CANAL}")
        except Exception as e:
            print(f"‚ùå Erro ao enviar mensagem de inicializa√ß√£o: {e}")
            print(traceback.format_exc())

    async def event_message(self, message):
        try:
            if message.echo:
                return
            print(f"üí¨ Mensagem recebida de {message.author.name}: {message.content}")
            
            # Verificar se come√ßa com um comando
            # √â um comando direto? (come√ßa com o prefixo)
            if message.content.startswith(self.prefix):
                print(f"üìù Mensagem identificada como comando: {message.content}")
                await self.handle_commands(message)
            else:
                # Verifica√ß√£o alternativa manual (fallback)
                content_lower = message.content.lower()
                if content_lower.startswith("!pergunta"):
                    print("üîç Detectado comando !pergunta manualmente")
                    await self.pergunta_gemini(message)
                elif content_lower.startswith("!enquete"):
                    print("üìä Detectado comando !enquete manualmente")
                    await self.cmd_enquete(message)
                elif content_lower.startswith("!teste"):
                    print("üß™ Detectado comando !teste manualmente")
                    await message.channel.send(f"‚úÖ Ol√° {message.author.name}, o bot est√° funcionando!")
        except Exception as e:
            print(f"‚ùå Erro ao processar mensagem: {e}")
            print(traceback.format_exc())

    async def event_command_error(self, ctx, error):
        print(f"‚ùå Erro no comando: {error}")
        if isinstance(error, commands.CommandNotFound):
            print(f"‚ùå Comando n√£o encontrado: {ctx.message.content}")
        elif isinstance(error, commands.CommandError):
            print(f"‚ùå Erro ao executar comando: {error}")
        print(traceback.format_exc())

    def obter_broadcaster_id(self):
        """Obt√©m o ID do streamer (broadcaster) para uso na API da Twitch."""
        url = "https://api.twitch.tv/helix/users"
        headers = {
            "Client-ID": CLIENT_ID,
            "Authorization": f"Bearer {TOKEN}"
        }
        try:
            response = requests.get(url, headers=headers)
            print(f"üîç Resposta da API Twitch (obter_broadcaster_id): {response.status_code}")
            data = response.json()
            broadcaster_id = data["data"][0]["id"] if "data" in data and data["data"] else None
            if broadcaster_id:
                print(f"‚úÖ Broadcaster ID obtido: {broadcaster_id}")
            else:
                print("‚ùå N√£o foi poss√≠vel obter o Broadcaster ID")
            return broadcaster_id
        except Exception as e:
            print(f"‚ùå Erro ao obter broadcaster_id: {e}")
            print(traceback.format_exc())
            return None

    def enviar_enquete(self, titulo, opcoes):
        """
        Cria uma enquete na Twitch via API.
        
        Args:
            titulo: T√≠tulo da enquete
            opcoes: Lista de op√ß√µes para a enquete
        
        Returns:
            bool: True se a enquete foi criada com sucesso
        """
        broadcaster_id = self.obter_broadcaster_id()
        if not broadcaster_id:
            print("‚ùå N√£o foi poss√≠vel obter o broadcaster_id")
            return False
            
        try:
            url = "https://api.twitch.tv/helix/polls"
            headers = {
                "Client-ID": CLIENT_ID,
                "Authorization": f"Bearer {TOKEN}",
                "Content-Type": "application/json"
            }
            
            # Garantir que o t√≠tulo e op√ß√µes estejam dentro dos limites da Twitch
            titulo = titulo[:60]  # M√°ximo de 60 caracteres
            opcoes_formatadas = [{"title": op[:25]} for op in opcoes[:5]]  # M√°x 5 op√ß√µes de 25 caracteres
            
            body = {
                "broadcaster_id": broadcaster_id,
                "title": titulo,
                "choices": opcoes_formatadas,
                "duration": 180  # Dura√ß√£o de 3 minutos (180 segundos)
            }

            print(f"üì§ Enviando requisi√ß√£o para criar enquete: {titulo}")
            print(f"üìã Op√ß√µes: {opcoes_formatadas}")
            print(f"üìã Body da requisi√ß√£o: {body}")
            
            response = requests.post(url, headers=headers, json=body)
            print(f"üîÅ Resposta API Twitch para criar enquete: {response.status_code}")
            print(f"üìÑ Corpo da resposta: {response.text}")
            
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå Erro ao criar enquete: {e}")
            print(traceback.format_exc())
            return False

    @commands.command(name="teste")
    async def cmd_teste(self, ctx):
        print(f"üß™ Comando teste recebido de {ctx.author.name}")
        try:
            await ctx.send(f"‚úÖ Ol√° {ctx.author.name}, o bot est√° funcionando!")
            print(f"‚úÖ Resposta do comando teste enviada para {ctx.author.name}")
        except Exception as e:
            print(f"‚ùå Erro ao responder comando teste: {e}")
            print(traceback.format_exc())

    @commands.command(name="compare")
    async def compare_character(self, ctx):
        print(f"üéÆ Comando compare recebido de {ctx.author.name}")
        try:
            parts = ctx.message.content.split()
            if len(parts) < 3:
                await ctx.send("Uso correto: !compare <realm_slug> <character_slug>")
                return

            realm_slug = parts[1].lower()
            character_slug = parts[2].lower()

            try:
                token = wow_comparative.get_access_token(os.getenv("BLIZZARD_CLIENT_ID"), os.getenv("BLIZZARD_CLIENT_SECRET"))
                character_data = wow_comparative.get_character_data("us", realm_slug, character_slug, token)
                character_stats = wow_comparative.get_character_statistics("us", realm_slug, character_slug, token)

                if character_data is None:
                    await ctx.send(f"Erro ao buscar dados do personagem '{character_slug}' no servidor '{realm_slug}'.")
                    return

                character_data.update(character_stats)

                for key, value in character_data.items():
                    if value is None or (isinstance(value, float) and (pd.isna(value) or value in [float('inf'), float('-inf')])):
                        character_data[key] = 0

                new_data = pd.DataFrame([character_data])
                wow_comparative.update_google_sheets(new_data, SPREADSHEET_ID, SHEET_NAME, CREDENTIALS_FILE)

                df = wow_comparative.get_google_sheets_df(SPREADSHEET_ID, SHEET_NAME, CREDENTIALS_FILE)
                percentile = wow_comparative.calculate_percentile(df, character_slug, realm_slug)

                if percentile is None:
                    await ctx.send(f"‚úÖ Dados de '{character_slug}' foram buscados na API e salvos na planilha! (N√£o foi poss√≠vel calcular o percentil)")
                else:
                    await ctx.send(f"‚úÖ Dados de '{character_slug}' salvos! üéØ Percentil: {percentile:.2f}% em Achievement Points.")

            except Exception as e:
                print(f"‚ùå Erro ao processar compara√ß√£o WoW: {e}")
                print(traceback.format_exc())
                await ctx.send(f"Erro ao processar a compara√ß√£o: {str(e)[:100]}...")
        except Exception as e:
            print(f"‚ùå Erro geral no comando compare: {e}")
            print(traceback.format_exc())

    @commands.command(name="enquete")
    async def cmd_enquete(self, ctx):
        """
        Comando que permite ao dono do canal criar uma enquete gerada por IA.
        Uso: !enquete tema da enquete
        """
        print(f"üìä Comando enquete recebido de {ctx.author.name}")
        try:
            autor = ctx.author.name.lower()
            canal = CANAL.lower()
            
            # Verificar se quem enviou o comando √© o dono do canal
            if autor != canal:
                print(f"‚õî Comando enquete rejeitado: Usu√°rio {autor} n√£o √© o dono do canal {canal}")
                await ctx.send(f"‚õî Apenas o dono do canal pode criar enquetes!")
                return
            
            # Verificar se o modelo Gemini est√° dispon√≠vel
            if not model:
                print("‚ùå Modelo Gemini n√£o est√° dispon√≠vel para criar enquete")
                await ctx.send("‚ùå N√£o foi poss√≠vel criar a enquete devido a problemas com a IA.")
                return
            
            # Extrair o tema da enquete do comando
            prompt_usuario = ctx.message.content.replace("!enquete", "").strip()
            
            # Se n√£o houver tema, usar um prompt gen√©rico
            if not prompt_usuario:
                prompt = "Crie uma enquete criativa e divertida com 3 op√ß√µes para uma live de games."
            else:
                prompt = f"Crie uma enquete divertida com 3 op√ß√µes sobre: {prompt_usuario}"
            
            try:
                await ctx.send("üß† Gerando enquete, aguarde...")
                print(f"üß† Enviando prompt para o Gemini: {prompt}")
                
                # Consultar a IA para criar uma enquete
                response = model.generate_content(prompt)
                resposta = response.text.strip()
                print(f"‚úÖ Resposta do Gemini: {resposta[:100]}...")
                
                # Processar a resposta para extrair t√≠tulo e op√ß√µes
                linhas = resposta.splitlines()
                titulo = linhas[0].strip() if linhas else "Enquete Gerada por IA"
                print(f"üìã T√≠tulo extra√≠do: {titulo}")
                
                # Extrair op√ß√µes (linhas que come√ßam com tra√ßo, asterisco ou n√∫mero)
                opcoes = []
                for linha in linhas[1:]:
                    linha_limpa = linha.strip()
                    if linha_limpa and (linha_limpa.startswith('-') or 
                                       linha_limpa.startswith('*') or 
                                       linha_limpa.startswith('‚Ä¢') or
                                       (len(linha_limpa) > 1 and linha_limpa[0].isdigit() and linha_limpa[1:2] in [')', '.', ':'])):
                        opcao = linha_limpa.lstrip('-*‚Ä¢0123456789). :').strip()
                        opcoes.append(opcao)
                
                print(f"üìã Op√ß√µes extra√≠das: {opcoes}")
                
                # Se n√£o conseguimos extrair pelo menos 2 op√ß√µes, vamos tentar uma abordagem mais simples
                if len(opcoes) < 2:
                    print("‚ö†Ô∏è Menos de 2 op√ß√µes extra√≠das, tentando abordagem alternativa")
                    # Procurar por linhas n√£o vazias depois do t√≠tulo
                    opcoes = [linha.strip() for linha in linhas[1:] if linha.strip()][:5]
                    print(f"üìã Op√ß√µes alternativas: {opcoes}")
                    
                    # Se ainda n√£o temos op√ß√µes suficientes, vamos gerar algumas padr√£o
                    if len(opcoes) < 2:
                        print("‚ö†Ô∏è Ainda sem op√ß√µes suficientes, gerando op√ß√µes padr√£o")
                        opcoes = ["Sim", "N√£o", "Talvez"]
                
                # Limitar a 5 op√ß√µes (m√°ximo permitido pela Twitch)
                opcoes = opcoes[:5]
                
                # Criar a enquete
                print("üìä Tentando criar enquete na Twitch...")
                sucesso = self.enviar_enquete(titulo, opcoes)
                
                if sucesso:
                    await ctx.send(f"üìä Enquete criada: {titulo}")
                    print("‚úÖ Enquete criada com sucesso!")
                else:
                    await ctx.send("‚ùå Falha ao criar a enquete. Verifique se o token tem permiss√£o para gerenciar enquetes (channel:manage:polls).")
                    print("‚ùå Falha ao criar enquete via API da Twitch")
            
            except Exception as e:
                print(f"‚ùå Erro ao processar AI para enquete: {e}")
                print(traceback.format_exc())
                await ctx.send("‚ö†Ô∏è Ocorreu um erro ao gerar ou enviar a enquete.")
        
        except Exception as e:
            print(f"‚ùå Erro geral ao processar comando enquete: {e}")
            print(traceback.format_exc())
            await ctx.send("‚ö†Ô∏è Ocorreu um erro inesperado.")

    @commands.command(name="pergunta")
    async def pergunta_gemini(self, ctx):
        print(f"üîç Comando pergunta recebido de {ctx.author.name}")
        try:
            autor = ctx.author.name
            prompt = ctx.message.content.replace("!pergunta", "").strip()
            agora = datetime.utcnow()
            tempo_limite = timedelta(seconds=60)

            if autor in self.cooldown_usuarios:
                tempo_restante = (self.cooldown_usuarios[autor] + tempo_limite) - agora
                if tempo_restante.total_seconds() > 0:
                    segundos = int(tempo_restante.total_seconds())
                    await ctx.send(f"‚è≥ {autor}, espere {segundos}s antes de usar esse comando novamente.")
                    return

            if not prompt:
                await ctx.send(f"{autor}, envie uma pergunta ap√≥s o comando. Ex: !pergunta Qual o maior planeta?")
                return

            # Verificar se o modelo Gemini est√° dispon√≠vel
            if not model:
                print("‚ùå Modelo Gemini n√£o est√° dispon√≠vel para responder pergunta")
                await ctx.send("‚ùå O servi√ßo de IA est√° temporariamente indispon√≠vel. Tente novamente mais tarde.")
                return

            try:
                await ctx.send("ü§ñ Pensando...")
                print(f"üß† Enviando prompt para o Gemini: {prompt}")
                
                response = model.generate_content(prompt)
                resposta = response.text.strip()
                print(f"‚úÖ Resposta do Gemini: {resposta[:100]}...")

                if not resposta:
                    resposta = "Desculpe, n√£o consegui pensar em nada agora. üòÖ"

                resposta_formatada = "[IA] " + resposta
                if len(resposta_formatada) > 490:
                    resposta_formatada = resposta_formatada[:490] + "..."

                await ctx.send(resposta_formatada)
                self.cooldown_usuarios[autor] = agora
                print(f"‚úÖ Resposta enviada para {autor}")
                
            except Exception as e:
                print(f"‚ùå Erro ao gerar resposta com Gemini: {e}")
                print(traceback.format_exc())
                await ctx.send("‚ö†Ô∏è Ocorreu um erro ao consultar a IA. Tente novamente.")
        except Exception as e:
            print(f"‚ùå Erro geral ao processar comando pergunta: {e}")
            print(traceback.format_exc())

# Exemplo de uso para testes locais
if __name__ == "__main__":
    try:
        print("üé¨ Iniciando o bot da Twitch...")
        print(f"üì° Canal: {CANAL}")
        print(f"üÜî Client ID: {CLIENT_ID}")

        bot = MeuBot()
        bot.run()
    except Exception as e:
        print(f"‚ùå Erro ao iniciar o bot: {e}")
        print(traceback.format_exc())
